{"ast":null,"code":"// import React, { useState } from \"react\";\n// import './styles/training-record-container.css';\n// import './styles/training-info.css';\n// import './styles/training-table.css';\n// import './styles/modal.css';\n// import './styles/calculator.css';\n// import './styles/timer.css';\n// import TrainingInfo from './TrainingInfo';\n// import TrainingTable from './TrainingTable';\n// import Modal from './Modal';\n\n// const TrainingRecord = () => {\n//   // トレーニングセットの状態を管理するためのuseStateフック\n//   const [sets, setSets] = useState([\n//     { weight: 85, reps: 5, complete: false, timer: \"02:00\" },\n//     { weight: 85, reps: 5, complete: false, timer: \"02:00\" },\n//     { weight: 85, reps: 5, complete: false, timer: \"02:00\" },\n//   ]);\n\n//   // モーダルウィンドウの表示状態を管理するためのuseStateフック\n//   const [modalVisible, setModalVisible] = useState(false);\n//   // 現在編集中のセットのインデックスを管理するためのuseStateフック\n//   const [currentSet, setCurrentSet] = useState(null);\n//   // 現在編集中のフィールドを管理するためのuseStateフック\n//   const [currentField, setCurrentField] = useState(\"\");\n//   // 現在編集中の値を管理するためのuseStateフック\n//   const [currentValue, setCurrentValue] = useState(\"\");\n\n//   // 新しいセットを追加する関数\n//   const handleAddSet = () => {\n//     setSets([...sets, { weight: 85, reps: 5, complete: false, timer: \"02:00\" }]);\n//   };\n\n//   // 指定したインデックスのセットを削除する関数\n//   const handleRemoveSet = (index) => {\n//     const updatedSets = sets.filter((_, i) => i !== index);\n//     setSets(updatedSets);\n//   };\n\n//   // 指定したインデックスのセットのフィールドを更新する関数\n//   const handleUpdateSet = (index, field, value) => {\n//     const updatedSets = sets.map((set, i) =>\n//       i === index ? { ...set, [field]: value } : set\n//     );\n//     setSets(updatedSets);\n//   };\n\n//   // モーダルウィンドウを開く関数\n//   const openModal = (index, field, value) => {\n//     setCurrentSet(index);\n//     setCurrentField(field);\n//     setCurrentValue(value);\n//     setModalVisible(true);\n//   };\n\n//   // モーダルウィンドウを閉じる関数\n//   const closeModal = () => {\n//     setModalVisible(false);\n//   };\n\n//   // モーダルウィンドウの保存ボタンをクリックしたときの関数\n//   const handleModalSave = () => {\n//     handleUpdateSet(currentSet, currentField, currentValue);\n//     closeModal();\n//   };\n\n//   // モーダルウィンドウの外側をクリックしたときにモーダルを閉じる関数\n//   const handleClickOutside = (event) => {\n//     if (event.target.className === \"modal\") {\n//       closeModal();\n//     }\n//   };\n\n//   // 電卓ボタンをクリックしたときの関数\n//   const handleCalculatorClick = (value) => {\n//     setCurrentValue((prev) => prev.toString() + value);\n//   };\n\n//   // バックスペースボタンをクリックしたときの関数\n//   const handleBackspace = () => {\n//     setCurrentValue((prev) => prev.toString().slice(0, -1));\n//   };\n\n//   // タイマーボタンをクリックしたときの関数\n//   const handleTimerSelect = (value) => {\n//     setCurrentValue(value);\n//   };\n\n//   return (\n//     <div className=\"training-record-container\">\n//       <h2 className=\"training-record-title\">トレーニング記録 : 12月15日（木）</h2>\n//       <div className=\"training-info\">\n//         <p>\n//           種目：<input type=\"text\" defaultValue=\"ベンチプレス\" readOnly />\n//         </p>\n//         <p>対象部位：胸</p>\n//         <p>MAX重量：95kg</p>\n//         <p>消費カロリー：xxxkcal</p>\n//       </div>\n\n//       <table className=\"training-table\">\n//         <thead>\n//           <tr>\n//             <th>セット</th>\n//             <th>kg</th>\n//             <th>回</th>\n//             <th>タイマー</th>\n//             <th>完了</th>\n//             <th>操作</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {sets.map((set, index) => (\n//             <tr key={index}>\n//               <td>{index + 1}</td>\n//               <td>\n//                 <input\n//                   type=\"number\"\n//                   value={set.weight}\n//                   onClick={() => openModal(index, \"weight\", set.weight)}\n//                   readOnly\n//                 />\n//               </td>\n//               <td>\n//                 <input\n//                   type=\"number\"\n//                   value={set.reps}\n//                   onClick={() => openModal(index, \"reps\", set.reps)}\n//                   readOnly\n//                 />\n//               </td>\n//               <td>\n//                 <input\n//                   type=\"text\"\n//                   value={set.timer}\n//                   onClick={() => openModal(index, \"timer\", set.timer)}\n//                   readOnly\n//                 />\n//               </td>\n//               <td>\n//                 <button\n//                   onClick={() => handleUpdateSet(index, \"complete\", !set.complete)}\n//                   className={set.complete ? \"complete-button\" : \"incomplete-button\"}\n//                 >\n//                   {set.complete ? \"レ\" : \"\"}\n//                 </button>\n//               </td>\n//               <td>\n//                 <button\n//                   onClick={() => handleRemoveSet(index)}\n//                   className=\"delete-button\"\n//                 >\n//                   削除\n//                 </button>\n//               </td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n\n//       <div className=\"add-set-button-container\">\n//         <button\n//           onClick={handleAddSet}\n//           className=\"add-set-button\"\n//         >\n//           + セット追加\n//         </button>\n//       </div>\n\n//       {modalVisible && (\n//         <div className=\"modal\" style={{ display: 'block' }} onClick={handleClickOutside}>\n//           <div className={`modal-content ${currentField === \"timer\" ? \"timer-modal-content\" : \"\"}`}>\n//             <input\n//               type=\"text\"\n//               className=\"keyboard-input\"\n//               value={currentValue}\n//               readOnly\n//             />\n//             {currentField === \"timer\" ? (\n//               <div className=\"timer-options\">\n//                 {[\"00:30\", \"01:30\", \"02:00\", \"03:00\", \"04:00\", \"05:00\"].map((time) => (\n//                   <button\n//                     key={time}\n//                     className=\"timer-button\"\n//                     onClick={() => handleTimerSelect(time)}\n//                   >\n//                     {time}\n//                   </button>\n//                 ))}\n//               </div>\n//             ) : (\n//               <div className=\"calculator-grid\">\n//                 {[1, 2, 3, 4, 5, 6, 7, 8, 9, 0].map((num) => (\n//                   <button\n//                     key={num}\n//                     className=\"calculator-button\"\n//                     onClick={() => handleCalculatorClick(num.toString())}\n//                   >\n//                     {num}\n//                   </button>\n//                 ))}\n//                 <button className=\"calculator-button\" onClick={() => handleCalculatorClick(\".\")}>.</button>\n//                 <button className=\"calculator-button\" onClick={handleBackspace}>&larr;</button>\n//               </div>\n//             )}\n//             <button className=\"modal-button\" onClick={handleModalSave}>保存</button>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default TrainingRecord;","map":{"version":3,"names":[],"sources":["/app/src/components/Home/Body/Traning record/training record.jsx"],"sourcesContent":["// import React, { useState } from \"react\";\n// import './styles/training-record-container.css';\n// import './styles/training-info.css';\n// import './styles/training-table.css';\n// import './styles/modal.css';\n// import './styles/calculator.css';\n// import './styles/timer.css';\n// import TrainingInfo from './TrainingInfo';\n// import TrainingTable from './TrainingTable';\n// import Modal from './Modal';\n\n\n// const TrainingRecord = () => {\n//   // トレーニングセットの状態を管理するためのuseStateフック\n//   const [sets, setSets] = useState([\n//     { weight: 85, reps: 5, complete: false, timer: \"02:00\" },\n//     { weight: 85, reps: 5, complete: false, timer: \"02:00\" },\n//     { weight: 85, reps: 5, complete: false, timer: \"02:00\" },\n//   ]);\n\n//   // モーダルウィンドウの表示状態を管理するためのuseStateフック\n//   const [modalVisible, setModalVisible] = useState(false);\n//   // 現在編集中のセットのインデックスを管理するためのuseStateフック\n//   const [currentSet, setCurrentSet] = useState(null);\n//   // 現在編集中のフィールドを管理するためのuseStateフック\n//   const [currentField, setCurrentField] = useState(\"\");\n//   // 現在編集中の値を管理するためのuseStateフック\n//   const [currentValue, setCurrentValue] = useState(\"\");\n\n//   // 新しいセットを追加する関数\n//   const handleAddSet = () => {\n//     setSets([...sets, { weight: 85, reps: 5, complete: false, timer: \"02:00\" }]);\n//   };\n\n//   // 指定したインデックスのセットを削除する関数\n//   const handleRemoveSet = (index) => {\n//     const updatedSets = sets.filter((_, i) => i !== index);\n//     setSets(updatedSets);\n//   };\n\n//   // 指定したインデックスのセットのフィールドを更新する関数\n//   const handleUpdateSet = (index, field, value) => {\n//     const updatedSets = sets.map((set, i) =>\n//       i === index ? { ...set, [field]: value } : set\n//     );\n//     setSets(updatedSets);\n//   };\n\n//   // モーダルウィンドウを開く関数\n//   const openModal = (index, field, value) => {\n//     setCurrentSet(index);\n//     setCurrentField(field);\n//     setCurrentValue(value);\n//     setModalVisible(true);\n//   };\n\n//   // モーダルウィンドウを閉じる関数\n//   const closeModal = () => {\n//     setModalVisible(false);\n//   };\n\n//   // モーダルウィンドウの保存ボタンをクリックしたときの関数\n//   const handleModalSave = () => {\n//     handleUpdateSet(currentSet, currentField, currentValue);\n//     closeModal();\n//   };\n\n//   // モーダルウィンドウの外側をクリックしたときにモーダルを閉じる関数\n//   const handleClickOutside = (event) => {\n//     if (event.target.className === \"modal\") {\n//       closeModal();\n//     }\n//   };\n\n//   // 電卓ボタンをクリックしたときの関数\n//   const handleCalculatorClick = (value) => {\n//     setCurrentValue((prev) => prev.toString() + value);\n//   };\n\n//   // バックスペースボタンをクリックしたときの関数\n//   const handleBackspace = () => {\n//     setCurrentValue((prev) => prev.toString().slice(0, -1));\n//   };\n\n//   // タイマーボタンをクリックしたときの関数\n//   const handleTimerSelect = (value) => {\n//     setCurrentValue(value);\n//   };\n\n//   return (\n//     <div className=\"training-record-container\">\n//       <h2 className=\"training-record-title\">トレーニング記録 : 12月15日（木）</h2>\n//       <div className=\"training-info\">\n//         <p>\n//           種目：<input type=\"text\" defaultValue=\"ベンチプレス\" readOnly />\n//         </p>\n//         <p>対象部位：胸</p>\n//         <p>MAX重量：95kg</p>\n//         <p>消費カロリー：xxxkcal</p>\n//       </div>\n\n//       <table className=\"training-table\">\n//         <thead>\n//           <tr>\n//             <th>セット</th>\n//             <th>kg</th>\n//             <th>回</th>\n//             <th>タイマー</th>\n//             <th>完了</th>\n//             <th>操作</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {sets.map((set, index) => (\n//             <tr key={index}>\n//               <td>{index + 1}</td>\n//               <td>\n//                 <input\n//                   type=\"number\"\n//                   value={set.weight}\n//                   onClick={() => openModal(index, \"weight\", set.weight)}\n//                   readOnly\n//                 />\n//               </td>\n//               <td>\n//                 <input\n//                   type=\"number\"\n//                   value={set.reps}\n//                   onClick={() => openModal(index, \"reps\", set.reps)}\n//                   readOnly\n//                 />\n//               </td>\n//               <td>\n//                 <input\n//                   type=\"text\"\n//                   value={set.timer}\n//                   onClick={() => openModal(index, \"timer\", set.timer)}\n//                   readOnly\n//                 />\n//               </td>\n//               <td>\n//                 <button\n//                   onClick={() => handleUpdateSet(index, \"complete\", !set.complete)}\n//                   className={set.complete ? \"complete-button\" : \"incomplete-button\"}\n//                 >\n//                   {set.complete ? \"レ\" : \"\"}\n//                 </button>\n//               </td>\n//               <td>\n//                 <button\n//                   onClick={() => handleRemoveSet(index)}\n//                   className=\"delete-button\"\n//                 >\n//                   削除\n//                 </button>\n//               </td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n\n//       <div className=\"add-set-button-container\">\n//         <button\n//           onClick={handleAddSet}\n//           className=\"add-set-button\"\n//         >\n//           + セット追加\n//         </button>\n//       </div>\n\n//       {modalVisible && (\n//         <div className=\"modal\" style={{ display: 'block' }} onClick={handleClickOutside}>\n//           <div className={`modal-content ${currentField === \"timer\" ? \"timer-modal-content\" : \"\"}`}>\n//             <input\n//               type=\"text\"\n//               className=\"keyboard-input\"\n//               value={currentValue}\n//               readOnly\n//             />\n//             {currentField === \"timer\" ? (\n//               <div className=\"timer-options\">\n//                 {[\"00:30\", \"01:30\", \"02:00\", \"03:00\", \"04:00\", \"05:00\"].map((time) => (\n//                   <button\n//                     key={time}\n//                     className=\"timer-button\"\n//                     onClick={() => handleTimerSelect(time)}\n//                   >\n//                     {time}\n//                   </button>\n//                 ))}\n//               </div>\n//             ) : (\n//               <div className=\"calculator-grid\">\n//                 {[1, 2, 3, 4, 5, 6, 7, 8, 9, 0].map((num) => (\n//                   <button\n//                     key={num}\n//                     className=\"calculator-button\"\n//                     onClick={() => handleCalculatorClick(num.toString())}\n//                   >\n//                     {num}\n//                   </button>\n//                 ))}\n//                 <button className=\"calculator-button\" onClick={() => handleCalculatorClick(\".\")}>.</button>\n//                 <button className=\"calculator-button\" onClick={handleBackspace}>&larr;</button>\n//               </div>\n//             )}\n//             <button className=\"modal-button\" onClick={handleModalSave}>保存</button>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default TrainingRecord;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}