{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nconst AlertFunction = ({\n  timer,\n  onComplete,\n  updateTimer\n}) => {\n  _s();\n  const [timeLeft, setTimeLeft] = useState(timer);\n  const originalTime = timer; // 元のタイマーの値を保持\n\n  useEffect(() => {\n    if (timeLeft > 0) {\n      const timerId = setInterval(() => {\n        setTimeLeft(prevTime => {\n          const newTime = prevTime - 1;\n          updateTimer(newTime);\n          return newTime;\n        });\n      }, 1000);\n      return () => clearInterval(timerId);\n    } else {\n      const audio = new Audio('/notification-sound.mp3');\n      audio.play();\n      onComplete();\n      setTimeLeft(originalTime); // 元のタイマーの値に戻す\n      updateTimer(originalTime); // 元のタイマーの値を更新\n    }\n  }, [timeLeft, onComplete, updateTimer, originalTime]);\n  return null;\n};\n_s(AlertFunction, \"2Yd+J5d2bPMD8wgibMjLU7TmTmM=\");\n_c = AlertFunction;\nexport default AlertFunction;\nvar _c;\n$RefreshReg$(_c, \"AlertFunction\");","map":{"version":3,"names":["React","useState","useEffect","AlertFunction","timer","onComplete","updateTimer","_s","timeLeft","setTimeLeft","originalTime","timerId","setInterval","prevTime","newTime","clearInterval","audio","Audio","play","_c","$RefreshReg$"],"sources":["/Users/sagaramichihiro/diet-maker/frontend/src/components/Home/Body/Common/AlertFunction.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst AlertFunction = ({ timer, onComplete, updateTimer }) => {\n  const [timeLeft, setTimeLeft] = useState(timer);\n  const originalTime = timer; // 元のタイマーの値を保持\n\n  useEffect(() => {\n    if (timeLeft > 0) {\n      const timerId = setInterval(() => {\n        setTimeLeft(prevTime => {\n          const newTime = prevTime - 1;\n          updateTimer(newTime);\n          return newTime;\n        });\n      }, 1000);\n\n      return () => clearInterval(timerId);\n    } else {\n      const audio = new Audio('/notification-sound.mp3');\n      audio.play();\n      onComplete();\n      setTimeLeft(originalTime); // 元のタイマーの値に戻す\n      updateTimer(originalTime); // 元のタイマーの値を更新\n    }\n  }, [timeLeft, onComplete, updateTimer, originalTime]);\n\n  return null;\n};\n\nexport default AlertFunction;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAElD,MAAMC,aAAa,GAAGA,CAAC;EAAEC,KAAK;EAAEC,UAAU;EAAEC;AAAY,CAAC,KAAK;EAAAC,EAAA;EAC5D,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAACG,KAAK,CAAC;EAC/C,MAAMM,YAAY,GAAGN,KAAK,CAAC,CAAC;;EAE5BF,SAAS,CAAC,MAAM;IACd,IAAIM,QAAQ,GAAG,CAAC,EAAE;MAChB,MAAMG,OAAO,GAAGC,WAAW,CAAC,MAAM;QAChCH,WAAW,CAACI,QAAQ,IAAI;UACtB,MAAMC,OAAO,GAAGD,QAAQ,GAAG,CAAC;UAC5BP,WAAW,CAACQ,OAAO,CAAC;UACpB,OAAOA,OAAO;QAChB,CAAC,CAAC;MACJ,CAAC,EAAE,IAAI,CAAC;MAER,OAAO,MAAMC,aAAa,CAACJ,OAAO,CAAC;IACrC,CAAC,MAAM;MACL,MAAMK,KAAK,GAAG,IAAIC,KAAK,CAAC,yBAAyB,CAAC;MAClDD,KAAK,CAACE,IAAI,CAAC,CAAC;MACZb,UAAU,CAAC,CAAC;MACZI,WAAW,CAACC,YAAY,CAAC,CAAC,CAAC;MAC3BJ,WAAW,CAACI,YAAY,CAAC,CAAC,CAAC;IAC7B;EACF,CAAC,EAAE,CAACF,QAAQ,EAAEH,UAAU,EAAEC,WAAW,EAAEI,YAAY,CAAC,CAAC;EAErD,OAAO,IAAI;AACb,CAAC;AAACH,EAAA,CAzBIJ,aAAa;AAAAgB,EAAA,GAAbhB,aAAa;AA2BnB,eAAeA,aAAa;AAAC,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}