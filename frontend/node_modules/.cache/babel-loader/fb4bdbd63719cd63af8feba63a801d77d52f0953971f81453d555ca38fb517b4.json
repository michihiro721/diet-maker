{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nconst AlertFunction = ({\n  timer,\n  onComplete,\n  updateTimer,\n  reset\n}) => {\n  _s();\n  const [timeLeft, setTimeLeft] = useState(timer); // タイマーの残り時間\n  const [hasCompleted, setHasCompleted] = useState(false); // タイマーが完了したかどうか\n  const originalTime = timer; // 元のタイマーの値を保持\n\n  useEffect(() => {\n    if (reset) {\n      // タイマーをリセットする\n      setTimeLeft(originalTime);\n      updateTimer(originalTime);\n      setHasCompleted(false);\n      return;\n    }\n    if (timeLeft > 0 && !hasCompleted) {\n      // タイマーをカウントダウンする\n      const timerId = setInterval(() => {\n        setTimeLeft(prevTime => {\n          const newTime = prevTime - 1;\n          updateTimer(newTime);\n          return newTime;\n        });\n      }, 1000);\n      return () => clearInterval(timerId);\n    } else if (timeLeft === 0 && !hasCompleted) {\n      // タイマーが0になったときの処理\n      const audio = new Audio('/notification-sound.mp3');\n      audio.play();\n      onComplete();\n      setHasCompleted(true);\n    }\n  }, [timeLeft, onComplete, updateTimer, originalTime, reset, hasCompleted]);\n  return null;\n};\n_s(AlertFunction, \"Coj/uUzHucm0JGv0nVz2GQwAC3s=\");\n_c = AlertFunction;\nexport default AlertFunction;\nvar _c;\n$RefreshReg$(_c, \"AlertFunction\");","map":{"version":3,"names":["React","useState","useEffect","AlertFunction","timer","onComplete","updateTimer","reset","_s","timeLeft","setTimeLeft","hasCompleted","setHasCompleted","originalTime","timerId","setInterval","prevTime","newTime","clearInterval","audio","Audio","play","_c","$RefreshReg$"],"sources":["/app/src/components/Home/Body/Common/AlertFunction.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst AlertFunction = ({ timer, onComplete, updateTimer, reset }) => {\n  const [timeLeft, setTimeLeft] = useState(timer); // タイマーの残り時間\n  const [hasCompleted, setHasCompleted] = useState(false); // タイマーが完了したかどうか\n  const originalTime = timer; // 元のタイマーの値を保持\n\n  useEffect(() => { \n    if (reset) {\n      // タイマーをリセットする\n      setTimeLeft(originalTime);\n      updateTimer(originalTime);\n      setHasCompleted(false);\n      return;\n    }\n\n    if (timeLeft > 0 && !hasCompleted) {\n      // タイマーをカウントダウンする\n      const timerId = setInterval(() => {\n        setTimeLeft(prevTime => {\n          const newTime = prevTime - 1;\n          updateTimer(newTime);\n          return newTime;\n        });\n      }, 1000);\n\n      return () => clearInterval(timerId);\n    } else if (timeLeft === 0 && !hasCompleted) {\n      // タイマーが0になったときの処理\n      const audio = new Audio('/notification-sound.mp3');\n      audio.play();\n      onComplete();\n      setHasCompleted(true);\n    }\n  }, [timeLeft, onComplete, updateTimer, originalTime, reset, hasCompleted]);\n\n  return null;\n};\n\nexport default AlertFunction;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAElD,MAAMC,aAAa,GAAGA,CAAC;EAAEC,KAAK;EAAEC,UAAU;EAAEC,WAAW;EAAEC;AAAM,CAAC,KAAK;EAAAC,EAAA;EACnE,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAACG,KAAK,CAAC,CAAC,CAAC;EACjD,MAAM,CAACO,YAAY,EAAEC,eAAe,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EACzD,MAAMY,YAAY,GAAGT,KAAK,CAAC,CAAC;;EAE5BF,SAAS,CAAC,MAAM;IACd,IAAIK,KAAK,EAAE;MACT;MACAG,WAAW,CAACG,YAAY,CAAC;MACzBP,WAAW,CAACO,YAAY,CAAC;MACzBD,eAAe,CAAC,KAAK,CAAC;MACtB;IACF;IAEA,IAAIH,QAAQ,GAAG,CAAC,IAAI,CAACE,YAAY,EAAE;MACjC;MACA,MAAMG,OAAO,GAAGC,WAAW,CAAC,MAAM;QAChCL,WAAW,CAACM,QAAQ,IAAI;UACtB,MAAMC,OAAO,GAAGD,QAAQ,GAAG,CAAC;UAC5BV,WAAW,CAACW,OAAO,CAAC;UACpB,OAAOA,OAAO;QAChB,CAAC,CAAC;MACJ,CAAC,EAAE,IAAI,CAAC;MAER,OAAO,MAAMC,aAAa,CAACJ,OAAO,CAAC;IACrC,CAAC,MAAM,IAAIL,QAAQ,KAAK,CAAC,IAAI,CAACE,YAAY,EAAE;MAC1C;MACA,MAAMQ,KAAK,GAAG,IAAIC,KAAK,CAAC,yBAAyB,CAAC;MAClDD,KAAK,CAACE,IAAI,CAAC,CAAC;MACZhB,UAAU,CAAC,CAAC;MACZO,eAAe,CAAC,IAAI,CAAC;IACvB;EACF,CAAC,EAAE,CAACH,QAAQ,EAAEJ,UAAU,EAAEC,WAAW,EAAEO,YAAY,EAAEN,KAAK,EAAEI,YAAY,CAAC,CAAC;EAE1E,OAAO,IAAI;AACb,CAAC;AAACH,EAAA,CAnCIL,aAAa;AAAAmB,EAAA,GAAbnB,aAAa;AAqCnB,eAAeA,aAAa;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}